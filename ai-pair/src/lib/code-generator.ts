import { parseAndApplyGeneratedCode } from './code-parser';
import { logger } from './logger';
import { Config } from '../models/config';
import { RunningState, CodeChangeSummary } from '../models/running-state';

class CodeGenerator {
    client: any; // Replace 'any' with the specific type of the client if available

    constructor(client: any) {
        this.client = client;
    }

    /**
     * Generates code using the AI client.
     * @param prompt - The prompt to send to the AI client.
     * @param config - The configuration object.
     * @returns The generated code from the AI client.
     */
    async generateCode(prompt: string, config: Config): Promise<string> {
        try {
            const generatedCode = await this.client.generateCode(
                prompt,
                config.tmpDir,
                config.systemPrompt
            );
            return generatedCode;
        } catch (error: any) {
            logger.error('Error during code generation:', error);
            throw error;
        }
    }

    /**
     * Parses and applies the generated code to the project.
     * @param generatedCode - The code generated by the AI.
     * @param config - The configuration object.
     * @param runningState - The running state to update with code changes.
     * @returns Details about the changes made.
     */
    applyGeneratedCode(generatedCode: string, config: Config, runningState: RunningState): CodeChangeSummary {
        try {
            const changes = parseAndApplyGeneratedCode(
                config,
                generatedCode,
                runningState
            );

            return changes;
        } catch (error: any) {
            logger.error('Error applying generated code:', error);
            throw error;
        }
    }
}

export default CodeGenerator; 